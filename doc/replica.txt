*replica.txt*                                   REPL for Scientific applications.

                      ______           _ _           ~
                      | ___ \         | (_)          ~
                      | |_/ /___ _ __ | |_  ___ __ _ ~
                      |    // _ | '_ \| | |/ __/ _` |~
                      | |\ |  __| |_) | | | (_| (_| |~
                      \_| \_\___| .__/|_|_|\___\__,_|~
                                | |                  ~
                                |_|                  ~

===============================================================================
CONTENTS                                                     *ReplicaContents*

    1. Introduction ......... |ReplicaIntroduction|
    2. Requirements ......... |ReplicaRequirements|
    3. Usage ................ |ReplicaUsage|
    4. Configuration ........ |ReplicaConfiguration|
    5. Add new languages .... |ReplicaAddLanguages|
    6. Troubleshooting ...... |ReplicaTroubleshooting|
    7. Contributing ......... |ReplicaContributing|
    8. License .............. |ReplicaLicense|


===============================================================================
INTRODUCTION                                         *ReplicaIntroduction*

Replica allows the usage any REPL programs (Python, Julia, etc.) inside
Vim in a seamless way.

Replica supports the following key features:

1. Sending lines, files and code-cells to a REPL,
2. Code-cells highlighting.

Each REPL is a jupyter-console started with a certain kernel running in a
'terminal' buffer.  For each 'filetype' replica provides you with one
available REPL to send text in.

You can work with many REPL:s for different languages at the same time.
Based on the current buffer 'filetype' replica will send text in the
appropriate REPL automatically.

If you are interested in contributing to the development of replica, read the
developer documentation. See |ReplicaContributing|.


===============================================================================
REQUIREMENTS                                         *ReplicaRequirements*

You must install jupyter console to make replica to work.

Once you have it installed, you need to install the jupyter kernels for all
the languages that you want to use.
To see a list of the installed kernels on your machine,
run jupyter kernelspec list from the command line of your terminal.

See jupyter console docs for more information.


===============================================================================
USAGE                                                     *ReplicaUsage*


                                                               *:ReplOpen*
:ReplOpen()                     Open the REPL associated to the current buffer
                                'filetype'.
                                The association 'filetype' - REPL type is
                                stored in the |g:repl_kernels| dictionary.

                                Example: If
                                    1. |g:repl_kernels|['python'] = python3 and
                                    2. |g:repl_names|['python'] = IPYTHON and
                                    3. current buffer 'filetype' is |python| and
                                    4. no replica python REPL is running,

                                then this command start a jupyter-console with
                                python3 kernel in a 'terminal' buffer named
                                IPYTHON and it place it in a window in position
                                |g:repl_direction|.

                                If the REPL already exists, then it open in
                                a window in position |g:repl_direction|.


                                                                   *:ReplClose*
:ReplClose([{REPL}])            Close {REPL}. The value of {REPL} must be one
                                value specified in the |g:repl_names| dict.
                                If no argument is passed, then it close
                                the REPL associated to the 'filetype'
                                of the current buffer.

                                For example, if |g:repl_names|['python'] is
                                IPYTHON and the current buffer 'filetype'
                                is |python|, then this command with no
                                arguments close the REPL named IPYTHON.


                                                                    *<F2>*
                                                               *:ReplToggle*
:ReplToggle()                   Un-hide and hide a REPL by alternating
                                |:ReplOpen()| and |:ReplClose()| calls.


                                                               *:ReplRestart*
:ReplRestart()                  Restart the REPL associated to the 'filetype'
                                of the current buffer as specified in
                                |g:repl_names|.

                                                               *:ReplShutoff*
:ReplShutoff([{REPL}])          Same as |:ReplClose| but it wipe away the
                                REPL.

                                                                    *<F9>*
                                                               *:ReplSendLines*
:[range]ReplSendLines()         Send the lines in [range] to the REPL specified
                                in |g:repl_names|. If no range is given,
                                then it sends the current line.


                                                                  *<c-enter>*
                                                               *:ReplSendCell*
:ReplSendCell()                 Send the current code-cell.
                                Cell delimiters are specified in the
                                |g:repl_cells_delimiters| dictionary.


                                                                    *<F5>*
                                                               *:ReplSendFile*
:ReplSendFile([{file}])         Send {file} to the REPL specified in
                                |g:repl_names|.
                                If no argument is passed, then it send the file
                                opened in the current buffer.


                                                          *:ReplRemoveCells*
:ReplRemoveCells()              Remove all the cells delimiters from the current
                                buffer.


===============================================================================
CONFIGURATION                                        *ReplicaConfiguration*

                                                        *g:repl_tmp_filename*
  Type: 'string'
  Default: `tempname()`

The temp file that is used when using the command |:ReplSendCell| and |:ReplSendFile|.
Note: this dictionary shall not be changed by the user!



                                                        *g:repl_alt_highlight*
  Type: 0 or 1.
  Default: 0.

Alternative way of highlighting code-cells.
Note: If you are experiencing sluggish behavior with the normal settings,
you could try to set it to 1.


                                                        *g:repl_direction*
  Type: HJKL.
  Default: L.

The location of the REPL window.


                                                        *g:repl_size*
  Type: non-negative number.
  Default: 0.

Size of the REPL window in lines or columns number.
If |g:repl_direction| = "J" or "K" then it sets the number of lines,
otherwise it sets the number of columns.
If the value is 0, then the window will take as much space as possible.



                                                        *g:repl_kernels*
  Type: 'dict'<'filetype', jupyter kernel>
  Default: {
            \ "python": "python3",
            \ "julia": "julia-1.8",
            \ "default": "terminal"}

Associates 'filetype' to jupyter kernels.
You can override existing key-values.
For example, to use the kernel julia-2.0 when working with julia
'filetype' you can use:    >

    g:repl_kernels['julia': "julia-2.0"]
<
To see the list of installed jupyter kernels run jupyter kernelspec list
from your terminal.
Note: to add a new language in replica you need to do a bit more work than
just editing this dictionary. See |replica-add-language| for more information.


                                                     *g:repl_cells_delimiters*
  Type: 'dict'<'filetype', 'string'>
  Default: {
            \ "python": "# %%",
            \ "julia": "# %%",
            \ "default": "#--"}

Associates 'filetype' to cell delimiters.
You can change the cell delimiter associated to a 'filetype' simply by
changing the value associated to such a 'filetype' key.
For example:
>
    g:repl_cells_delimiters['python': "#%%"]
<

                                                     *g:repl_names*
  Type: 'dict'<'filetype', 'string'>
  Default:{
            \ "python": "IPYTHON",
            \ "julia": "JULIA",
            \ "default": "TERMINAL"}


Associates 'filetype' to 'terminal' buffer names.
Note: this dictionary shall not be changed by the user!


                                                     *g:repl_run_commands*
  Type: 'dict'<'filetype', 'string'>
  Default:{
            \ "python": "run -i " .. |g:repl_tmp_filename|,
            \ "julia": 'include("' .. |g:repl_tmp_filename| .. '")',
            \ "default": "sh " .. |g:repl_tmp_filename|}

Associates 'filetype' to commands that are run in the REPL when using
|:ReplSendCell| or |:ReplSendFile| commands.
Note: this dictionary shall not be changed by the user!


===============================================================================
ADD NEW LANGUAGES                                     *ReplicaAddLanguages*

Replica is nicely extendable and to add new languages is fairly easy.

Say that a new language is associated to a certain 'filetype'.
Then, you can add it to replica in two steps:

    1. Add a new key-value pair to the |g:repl_kernels|, |g:repl_names|,
    |g:repl_cells_delimiters| and |g:repl_run_commands| dictionaries.
    2. Create a new 'filetype'.vim file in vim-replica/ftplugin and copy/paste
    the content of an existing 'filetype'.vim in the same folder in the newly
    created file. Adjust the file content accordingly.

Done!
TODO: You may use the global ftplugin folder but it has been not tested yet.


===============================================================================
TROUBLESHOOTING                                      *ReplicaTroubleshooting*

Q. My Vim became very slow!
A. You can try to set |g:repl_alt_highlight| = 1 in your .vimrc.

Q. Is it possible to copy from the REPL to a buffer?
A. Yes! If you <c-w>N in your REPL, then it becomes just an ordinary buffer.
There you can yank everything you want.
To re-enable the REPL just press i with the cursor located on the REPL window.


===============================================================================
CONTRIBUTING                                            *ReplicaContributing*

Contributions are most than welcome!
Feel free to add a PR on GitHub. :)


===============================================================================
LICENSE                                                    *ReplicaLicense*

BSD-3Clause License.
Copyright ©2023 Ubaldo Tiberi.

vim:tw=78:et:ft=help:norl:
