*replica.txt*                               REPL for Scientific applications.

                   _                                _ _           ~
                  (_)                              | (_)          ~
            __   ___ _ __ ___ ______ _ __ ___ _ __ | |_  ___ __ _ ~
            \ \ / / | '_ ` _ \______| '__/ _ \ '_ \| | |/ __/ _` |~
             \ V /| | | | | | |     | | |  __/ |_) | | | (_| (_| |~
              \_/ |_|_| |_| |_|     |_|  \___| .__/|_|_|\___\__,_|~
                                             | |                  ~
                                             |_|                  ~

==============================================================================
CONTENTS                                                     *ReplicaContents*

    1. Introduction ......... |ReplicaIntroduction|
    2. Requirements ......... |ReplicaRequirements|
    3. Usage ................ |ReplicaUsage|
         3.1 Commands ....... |ReplicaCommands|
         3.2 Mappings ....... |ReplicaMappings|
    4. Configuration ........ |ReplicaConfiguration|
    5. Add new languages .... |ReplicaAddLanguages|
    6. Troubleshooting ...... |ReplicaTroubleshooting|
    7. Contributing ......... |ReplicaContributing|
    8. License .............. |ReplicaLicense|


==============================================================================
INTRODUCTION                                         *ReplicaIntroduction*

Replica allows the usage any REPL programs (Python, Julia, etc.) inside
Vim in a seamless way.

Replica supports the following key features:

    1. Sending lines, files and code-cells to a REPL,
    2. Code-cells highlighting.

Each REPL is a jupyter-console started with a certain kernel running in a
'terminal' buffer.  For each 'filetype' replica provides you with one
available REPL to send text in.

You can work with many REPL:s for different languages at the same time.
Based on the current buffer 'filetype' replica will send text in the
appropriate REPL automatically.

If you are interested in contributing to the development of replica, read the
developer documentation. See |ReplicaContributing|.

==============================================================================
REQUIREMENTS                                         *ReplicaRequirements*

Replica is written in Vim9script, therefore you need at least Vim 9.0.

Furthermore, you must install jupyter console to make replica to work.

Once you have the latter installed, you need to install the jupyter kernels
for all the languages that you want to use with vim-replica.
You can google to discover the available jupyter kernels out there whereas you
can run jupyter kernelspec list from the command line of your terminal to see
the list of kernels installed on your machine.

See jupyter console docs for more information.

==============================================================================
USAGE                                                     *ReplicaUsage*

Enter any 'filetype' supported buffer and run any |ReplicaCommands| described
below. |ReplicaCommands| are self-explanatory.
Note: The commands work only if they are run from a buffer whose 'filetype' is
supported.

==============================================================================
COMMANDS                                                     *ReplicaCommands*

                                                  *:ReplicaConsoleToggle*
:ReplicaConsoleToggle()         Un-hide and hide a REPL.

                                               *:ReplicaConsoleRestart*
:ReplicaConsoleRestart()        Restart the REPL associated to the
                                'filetype' of the current buffer as specified
                                in |g:replica_names|.

                                               *:ReplicaConsoleShutoff*
:ReplicaConsoleShutoff()        Wipeout the buffer associated to the REPL.

                                                  *:ReplicaSendLines*
:[range]ReplSendLines()         Send the lines in [range] to the REPL
                                specified in |g:replica_names|.  If no range
                                is given, then it sends the current line.


                                                       *:ReplicaSendCell*
:ReplicaSendCell()              Send the current code-cell.
                                Cell delimiters are specified in the
                                |g:replica_cells_delimiters| dictionary.


                                                      *:ReplicaSendFile*
:ReplicaSendFile([{file}])      Send {file} to the REPL specified in
                                |g:replica_names|.
                                If no argument is passed, then it send the
                                file opened in the current buffer.


                                                   *:ReplicaRemoveCells*
:ReplicaRemoveCells()           Remove all the cells delimiters from the
                                current buffer.


==============================================================================
MAPPINGS                                               *ReplicaMappings*

<F2>   or   <Plug>ReplicaConsoleToggle
Open and close the REPL.

<F9>   or   <Plug>ReplicaSendLines
Send the current line to the REPL.

<F5>   or   <Plug>ReplicaSendFile
Send the current file to the REPL.

<c-enter> or <Plug>ReplicaSendCell
Send the current cell to the REPL.

==============================================================================
CONFIGURATION                                        *ReplicaConfiguration*

                                                   *g:replica_tmp_filename*
Type: 'string'
Default: `tempname()`

The temp file that is used when using the command |:ReplicaSendCell| and
|:ReplicaSendFile|.
Note: This dictionary shall not be changed by the user!


                                                  *g:replica_alt_highlight*
Type: 'bool'
Default: false

Alternative way of highlighting code-cells.
Note: If you are experiencing sluggish behavior with the normal settings,
you could try to set it to true.


                                                *g:replica_console_position*
Type: HJKL.
Default: L.

The location of the REPL window.


                                                   *g:replica_console_width*
Type: non-negative number.
Default: if |g:replica_console_position| = "L" ||
                    \.. |g:replica_console_position| = "H"
                |g:replica_console_width| = floor(&columns/2).
            else
                |g:replica_console_width| = &columns/.
         endif

Width of the REPL window in columns number.

                                                   *g:replica_console_height*
Type: non-negative number.
Default: if |g:replica_console_position| = "L" ||
                    \.. |g:replica_console_position| = "H"
                |g:replica_console_width| = &lines.
            else
                |g:replica_console_width| = 10.
         endif

Height of the REPL window in lines number.

                                                     *g:replica_kernels*
Type: 'dict'<'filetype', jupyter kernel>
Default: {"python": "python3",
            \ "julia": "julia-1.8"}

Associates 'filetype' to jupyter kernels.
You can override existing key-values.
For example, to use the kernel julia-2.0 when working with julia
'filetype' you can use:    >

    g:replica_kernels['julia': "julia-2.0"]
<
To see the list of installed jupyter kernels run jupyter kernelspec list
from your terminal.
Note: to add a new language in replica you need to do a bit more work than
just editing this dictionary. See |ReplicaAddLanguages| for more information.


                                           *g:replica_cells_delimiters*
  Type: 'dict'<'filetype', 'string'>
  Default: { "python": "# %%",
            \ "julia": "# %%"}

Associates 'filetype' to cell delimiters.
You can change the cell delimiter associated to a 'filetype' simply by
changing the value associated to such a 'filetype' key.
For example:
>
    g:replica_cells_delimiters['python': "#%%"]
<

                                                     *g:replica_names*
  Type: 'dict'<'filetype', 'string'>
  Default:{ "python": "IPYTHON",
            \ "julia": "JULIA"}


Associates 'filetype' to 'terminal' buffer names.
Note: this dictionary shall not be changed by the user!

                                                     *g:replica_run_commands*
  Type: 'dict'<'filetype', 'string'>
  Default:{ "python": "run -i " .. |g:replica_tmp_filename|,
            \ "julia": 'include("' .. |g:replica_tmp_filename| .. '")'}

Associates 'filetype' to commands that are run in the REPL when using
|:ReplicaSendCell| or |:ReplicaSendFile| commands.
Note: this dictionary shall not be changed by the user!


==============================================================================
ADD NEW LANGUAGES                                     *ReplicaAddLanguages*

Replica is nicely extendable and adding new languages is fairly easy.

Say that a new language is associated to a certain 'filetype'.
Then, you can add it to replica in two steps:

    1. Add a new key-value pair to the |g:replica_kernels|, |g:replica_names|,
    |g:replica_cells_delimiters| and |g:replica_run_commands| dictionaries.
    2. Duplicate any existing vim-replica/ftplugin/*.vim file and rename it
    according to the newly included 'filetype'.

Done!

You may use the global ftplugin folder but it has not been tested yet.

==============================================================================
TROUBLESHOOTING                                      *ReplicaTroubleshooting*

Q. My Vim became very slow!
A. You can try to set |g:replica_alt_highlight| = true in your 'vimrc'.

Q. Is it possible to copy from a REPL to a buffer?
A. Yes! If you <c-w>N in your REPL, then it becomes just an ordinary buffer.
There you can yank everything you want.
To re-enable the REPL just press i with the cursor located on the REPL window.

Q. Is it possible to automatically change the REPL folder when I change
Vim folder?
A. Yes, but you need to define your own function, something like
>
    def ChangeTerminalDir()
        for ii in term_list()
            if bufname(ii) == "JULIA"
               term_sendkeys(ii, 'cd("' .. getcwd() .. '")' .. "\n")
            else
               term_sendkeys(ii, "cd " .. getcwd() .. "\n")
            endif
        endfor
    enddef

    augroup DIRCHANGE
        au!
        autocmd DirChanged global ChangeTerminalDir()
    augroup END
<
This will automatically change folder to all the open 'terminal' buffers.
Note: depending on the REPL, you may need a different command to
change folder.
Note: It does not work the other way around, i.e. if you change folder from a
'terminal' buffer the Vim current folder won't be changed.

Q. When I call |:ReplicaConsoleToggle| the console window won't close.
A. Replica commands work only if executed from a buffer with a supported
filetype. That is, if you have an IPYTHON console displayed in a window and
you call   |:ReplicaConsoleToggle|  from a text filetype buffer, then nothing
will happen.
However, you can close the window where the console is running with standard
Vim commands such as <c-w>q, :close, :$close, etc.

==============================================================================
CONTRIBUTING                                            *ReplicaContributing*

Contributions are most than welcome!
Feel free to add a PR on GitHub. :)

==============================================================================
LICENSE                                                    *ReplicaLicense*

Vim license.
Copyright ©2023 Ubaldo Tiberi.

vim:tw=78:et:ft=help:norl:
